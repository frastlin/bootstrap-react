{"version":3,"sources":["../../../src/react-wrapped-components/Combobox/ComboboxMain.js"],"names":["React","EditCombobox","ReadOnlyCombobox","ComboboxMain","Component","handleSubmit","ev","form","target","alert","value","stopPropagation","preventDefault","render"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,YAAP,MAAyB,mCAAzB;AACA,OAAOC,gBAAP,MAA6B,mCAA7B;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AACzCC,EAAAA,YAAY,CAACC,EAAD,EAAK;AACf,QAAIC,IAAI,GAAGD,EAAE,CAACE,MAAd;AACAC,IAAAA,KAAK,CAAC,YAAYF,IAAI,CAAC,mBAAD,CAAJ,CAA0BG,KAAvC,CAAL;AACAD,IAAAA,KAAK,CAAC,cAAcF,IAAI,CAAC,qBAAD,CAAJ,CAA4BG,KAA3C,CAAL;AACAJ,IAAAA,EAAE,CAACK,eAAH;AACAL,IAAAA,EAAE,CAACM,cAAH;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,EAAE,EAAC;AAAR,OACE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE,gCACE,2DADF,CADF,CADF,EAME;AAAK,MAAA,SAAS,EAAC;AAAf,OACE,+BACG,GADH,kIADF,CANF,EAaE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE;AACE,MAAA,SAAS,EAAC,gBADZ;AAEE,MAAA,QAAQ,EAAEP,EAAE,IAAI,KAAKD,YAAL,CAAkBC,EAAlB;AAFlB,OAIE,oBAAC,YAAD,OAJF,EAKE,oBAAC,gBAAD,OALF,EAME,+BACE;AAAQ,MAAA,IAAI,EAAC;AAAb,gBADF,CANF,CADF,CAbF,EAyBE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE,yEADF,EAEE,gCACE,yGADF,EAKE,sHAEiB;AAAK,MAAA,KAAK,EAAC;AAAX,cAFjB,uDAG2B;AAAK,MAAA,KAAK,EAAC;AAAX,YAH3B,UAGwD,GAHxD,EAIE;AAAK,MAAA,KAAK,EAAC;AAAX,cAJF,+CALF,EAYE,4EAC2C,GAD3C,EAEE;AAAK,MAAA,KAAK,EAAC;AAAX,cAFF,UAEkC;AAAK,MAAA,KAAK,EAAC;AAAX,eAFlC,EAEiE,GAFjE,mEAZF,EAiBE,iFACgD,GADhD,EAEE;AAAK,MAAA,KAAK,EAAC;AAAX,cAFF,2DAjBF,EAsBE,iJAtBF,EA0BE,0CACQ,yCADR,SAC4B,GAD5B,EAEE,iCACE,uCADF,OACiB,sCADjB,CAFF,EAIS,GAJT,kDA1BF,EAiCE,qDACmB,0CADnB,QACsC,uCADtC,SACwD,GADxD,EAEE,iCACE,yCADF,OACmB,uCADnB,CAFF,EAIS,GAJT,2BAjCF,EAwCE,iIAxCF,CAFF,CAzBF,CADF;AA4ED;;AArFwC;;AAwF3C,eAAeH,YAAf","sourcesContent":["import React from \"react\";\r\n\r\nimport EditCombobox from \"./Editable/NativeEditableCombobox\";\r\nimport ReadOnlyCombobox from \"./ReadOnly/NativeReadOnlyCombobox\";\r\n\r\nclass ComboboxMain extends React.Component {\r\n  handleSubmit(ev) {\r\n    let form = ev.target;\r\n    alert(\"State: \" + form[\"state-input-value\"].value);\r\n    alert(\"Country: \" + form[\"country-input-value\"].value);\r\n    ev.stopPropagation();\r\n    ev.preventDefault();\r\n  }\r\n  render() {\r\n    return (\r\n      <div id=\"pg-combobox\">\r\n        <div className=\"hd\">\r\n          <h3>\r\n            <span> Accessible Comboboxes</span>\r\n          </h3>\r\n        </div>\r\n        <div className=\"intro highlight\">\r\n          <p>\r\n            {\" \"}\r\n            A combobox control simplifies the task of selecting dynamically\r\n            filtered options, and may be read-only or editable as needed.\r\n          </p>\r\n        </div>\r\n        <div className=\"intro tal demo-block\">\r\n          <form\r\n            className=\"demoComboboxes\"\r\n            onSubmit={ev => this.handleSubmit(ev)}\r\n          >\r\n            <EditCombobox />\r\n            <ReadOnlyCombobox />\r\n            <p>\r\n              <button type=\"submit\">Submit</button>\r\n            </p>\r\n          </form>\r\n        </div>\r\n        <div className=\"intro tal keyboard\">\r\n          <p>The comboboxes are keyboard accessible:</p>\r\n          <ul>\r\n            <li>\r\n              Set focus to the State or Country fields to open the combobox\r\n              control.\r\n            </li>\r\n            <li>\r\n              Within a combobox that is not readonly, first type into the field,\r\n              then press the <kbd class=\"down\">Down</kbd> arrow to navigate into\r\n              the dropdown and use the <kbd class=\"up\">Up</kbd> and{\" \"}\r\n              <kbd class=\"down\">Down</kbd> arrow keys to navigate available\r\n              options.\r\n            </li>\r\n            <li>\r\n              Press any other letter or number, or the{\" \"}\r\n              <kbd class=\"left\">Left</kbd> or <kbd class=\"right\">Right</kbd>{\" \"}\r\n              arrow keys to then move focus back into the Input for editing.\r\n            </li>\r\n            <li>\r\n              Within a combobox that is readonly, press the{\" \"}\r\n              <kbd class=\"down\">Down</kbd> arrow or click the trigger icon to\r\n              open the dropdown.\r\n            </li>\r\n            <li>\r\n              Press any letter or number within a readonly field to jump to an\r\n              option starting with that character or digit.\r\n            </li>\r\n            <li>\r\n              Press <kbd>Enter</kbd> or{\" \"}\r\n              <kbd>\r\n                <kbd>Alt</kbd>+<kbd>Up</kbd>\r\n              </kbd>{\" \"}\r\n              to close the dropdown and save the selection.\r\n            </li>\r\n            <li>\r\n              To cancel, press <kbd>Escape</kbd>, <kbd>Tab</kbd> or{\" \"}\r\n              <kbd>\r\n                <kbd>Shift</kbd>+<kbd>Tab</kbd>\r\n              </kbd>{\" \"}\r\n              to close the dropdown.\r\n            </li>\r\n            <li>\r\n              Sighted mouse users can click the desired option to save the\r\n              selection and close the dropdown.\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ComboboxMain;\r\n"],"file":"ComboboxMain.js"}